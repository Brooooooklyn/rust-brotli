extern "C" {
  fn BrotliBuildAndStoreHuffmanTreeFast(m: &mut [MemoryManager],
                                        histogram: &[u32],
                                        histogram_total: usize,
                                        max_bits: usize,
                                        depth: &mut [u8],
                                        bits: &mut [u16],
                                        storage_ix: &mut [usize],
                                        storage: &mut [u8]);
  fn BrotliConvertBitDepthsToSymbols(depth: &[u8], len: usize, bits: &mut [u16]);
  fn BrotliCreateHuffmanTree(data: &[u32],
                             length: usize,
                             tree_limit: i32,
                             tree: &mut [HuffmanTree],
                             depth: &mut [u8]);
  fn BrotliStoreHuffmanTree(depths: &[u8],
                            num: usize,
                            tree: &mut [HuffmanTree],
                            storage_ix: &mut [usize],
                            storage: &mut [u8]);
  fn __swbuf(arg1: i32, arg2: &mut [__sFILE]) -> i32;
  fn memcpy(__dst: &mut [::std::os::raw::c_void],
            __src: &[::std::os::raw::c_void],
            __n: usize)
            -> *mut ::std::os::raw::c_void;
  fn memset(__b: &mut [::std::os::raw::c_void],
            __c: i32,
            __len: usize)
            -> *mut ::std::os::raw::c_void;
}

enum __sFILEX {
}

static kCompressFragmentTwoPassBlockSize: usize = (1i32 << 17i32) as (usize);

static mut kLog2Table: [f64; 256] = [0.0000000000000000f64,
                                     0.0000000000000000f64,
                                     1.0000000000000000f64,
                                     1.5849625007211563f64,
                                     2.0000000000000000f64,
                                     2.3219280948873622f64,
                                     2.5849625007211561f64,
                                     2.8073549220576042f64,
                                     3.0000000000000000f64,
                                     3.1699250014423126f64,
                                     3.3219280948873626f64,
                                     3.4594316186372978f64,
                                     3.5849625007211565f64,
                                     3.7004397181410922f64,
                                     3.8073549220576037f64,
                                     3.9068905956085187f64,
                                     4.0000000000000000f64,
                                     4.0874628412503400f64,
                                     4.1699250014423122f64,
                                     4.2479275134435852f64,
                                     4.3219280948873626f64,
                                     4.3923174227787607f64,
                                     4.4594316186372973f64,
                                     4.5235619560570131f64,
                                     4.5849625007211570f64,
                                     4.6438561897747244f64,
                                     4.7004397181410926f64,
                                     4.7548875021634691f64,
                                     4.8073549220576037f64,
                                     4.8579809951275728f64,
                                     4.9068905956085187f64,
                                     4.9541963103868758f64,
                                     5.0000000000000000f64,
                                     5.0443941193584534f64,
                                     5.0874628412503400f64,
                                     5.1292830169449664f64,
                                     5.1699250014423122f64,
                                     5.2094533656289501f64,
                                     5.2479275134435852f64,
                                     5.2854022188622487f64,
                                     5.3219280948873626f64,
                                     5.3575520046180838f64,
                                     5.3923174227787607f64,
                                     5.4262647547020979f64,
                                     5.4594316186372973f64,
                                     5.4918530963296748f64,
                                     5.5235619560570131f64,
                                     5.5545888516776376f64,
                                     5.5849625007211570f64,
                                     5.6147098441152083f64,
                                     5.6438561897747244f64,
                                     5.6724253419714961f64,
                                     5.7004397181410926f64,
                                     5.7279204545631996f64,
                                     5.7548875021634691f64,
                                     5.7813597135246599f64,
                                     5.8073549220576046f64,
                                     5.8328900141647422f64,
                                     5.8579809951275719f64,
                                     5.8826430493618416f64,
                                     5.9068905956085187f64,
                                     5.9307373375628867f64,
                                     5.9541963103868758f64,
                                     5.9772799234999168f64,
                                     6.0000000000000000f64,
                                     6.0223678130284544f64,
                                     6.0443941193584534f64,
                                     6.0660891904577721f64,
                                     6.0874628412503400f64,
                                     6.1085244567781700f64,
                                     6.1292830169449672f64,
                                     6.1497471195046822f64,
                                     6.1699250014423122f64,
                                     6.1898245588800176f64,
                                     6.2094533656289510f64,
                                     6.2288186904958804f64,
                                     6.2479275134435861f64,
                                     6.2667865406949019f64,
                                     6.2854022188622487f64,
                                     6.3037807481771031f64,
                                     6.3219280948873617f64,
                                     6.3398500028846252f64,
                                     6.3575520046180847f64,
                                     6.3750394313469254f64,
                                     6.3923174227787598f64,
                                     6.4093909361377026f64,
                                     6.4262647547020979f64,
                                     6.4429434958487288f64,
                                     6.4594316186372982f64,
                                     6.4757334309663976f64,
                                     6.4918530963296748f64,
                                     6.5077946401986964f64,
                                     6.5235619560570131f64,
                                     6.5391588111080319f64,
                                     6.5545888516776376f64,
                                     6.5698556083309478f64,
                                     6.5849625007211561f64,
                                     6.5999128421871278f64,
                                     6.6147098441152092f64,
                                     6.6293566200796095f64,
                                     6.6438561897747253f64,
                                     6.6582114827517955f64,
                                     6.6724253419714952f64,
                                     6.6865005271832185f64,
                                     6.7004397181410917f64,
                                     6.7142455176661224f64,
                                     6.7279204545631988f64,
                                     6.7414669864011465f64,
                                     6.7548875021634691f64,
                                     6.7681843247769260f64,
                                     6.7813597135246599f64,
                                     6.7944158663501062f64,
                                     6.8073549220576037f64,
                                     6.8201789624151887f64,
                                     6.8328900141647422f64,
                                     6.8454900509443757f64,
                                     6.8579809951275719f64,
                                     6.8703647195834048f64,
                                     6.8826430493618416f64,
                                     6.8948177633079437f64,
                                     6.9068905956085187f64,
                                     6.9188632372745955f64,
                                     6.9307373375628867f64,
                                     6.9425145053392399f64,
                                     6.9541963103868758f64,
                                     6.9657842846620879f64,
                                     6.9772799234999168f64,
                                     6.9886846867721664f64,
                                     7.0000000000000000f64,
                                     7.0112272554232540f64,
                                     7.0223678130284544f64,
                                     7.0334230015374501f64,
                                     7.0443941193584534f64,
                                     7.0552824355011898f64,
                                     7.0660891904577721f64,
                                     7.0768155970508317f64,
                                     7.0874628412503400f64,
                                     7.0980320829605272f64,
                                     7.1085244567781700f64,
                                     7.1189410727235076f64,
                                     7.1292830169449664f64,
                                     7.1395513523987937f64,
                                     7.1497471195046822f64,
                                     7.1598713367783891f64,
                                     7.1699250014423130f64,
                                     7.1799090900149345f64,
                                     7.1898245588800176f64,
                                     7.1996723448363644f64,
                                     7.2094533656289492f64,
                                     7.2191685204621621f64,
                                     7.2288186904958804f64,
                                     7.2384047393250794f64,
                                     7.2479275134435861f64,
                                     7.2573878426926521f64,
                                     7.2667865406949019f64,
                                     7.2761244052742384f64,
                                     7.2854022188622487f64,
                                     7.2946207488916270f64,
                                     7.3037807481771031f64,
                                     7.3128829552843557f64,
                                     7.3219280948873617f64,
                                     7.3309168781146177f64,
                                     7.3398500028846243f64,
                                     7.3487281542310781f64,
                                     7.3575520046180847f64,
                                     7.3663222142458151f64,
                                     7.3750394313469254f64,
                                     7.3837042924740528f64,
                                     7.3923174227787607f64,
                                     7.4008794362821844f64,
                                     7.4093909361377026f64,
                                     7.4178525148858991f64,
                                     7.4262647547020979f64,
                                     7.4346282276367255f64,
                                     7.4429434958487288f64,
                                     7.4512111118323299f64,
                                     7.4594316186372973f64,
                                     7.4676055500829976f64,
                                     7.4757334309663976f64,
                                     7.4838157772642564f64,
                                     7.4918530963296748f64,
                                     7.4998458870832057f64,
                                     7.5077946401986964f64,
                                     7.5156998382840436f64,
                                     7.5235619560570131f64,
                                     7.5313814605163119f64,
                                     7.5391588111080319f64,
                                     7.5468944598876373f64,
                                     7.5545888516776376f64,
                                     7.5622424242210728f64,
                                     7.5698556083309478f64,
                                     7.5774288280357487f64,
                                     7.5849625007211561f64,
                                     7.5924570372680806f64,
                                     7.5999128421871278f64,
                                     7.6073303137496113f64,
                                     7.6147098441152075f64,
                                     7.6220518194563764f64,
                                     7.6293566200796095f64,
                                     7.6366246205436488f64,
                                     7.6438561897747244f64,
                                     7.6510516911789290f64,
                                     7.6582114827517955f64,
                                     7.6653359171851765f64,
                                     7.6724253419714952f64,
                                     7.6794800995054464f64,
                                     7.6865005271832185f64,
                                     7.6934869574993252f64,
                                     7.7004397181410926f64,
                                     7.7073591320808825f64,
                                     7.7142455176661224f64,
                                     7.7210991887071856f64,
                                     7.7279204545631996f64,
                                     7.7347096202258392f64,
                                     7.7414669864011465f64,
                                     7.7481928495894596f64,
                                     7.7548875021634691f64,
                                     7.7615512324444795f64,
                                     7.7681843247769260f64,
                                     7.7747870596011737f64,
                                     7.7813597135246608f64,
                                     7.7879025593914317f64,
                                     7.7944158663501062f64,
                                     7.8008998999203047f64,
                                     7.8073549220576037f64,
                                     7.8137811912170374f64,
                                     7.8201789624151887f64,
                                     7.8265484872909159f64,
                                     7.8328900141647422f64,
                                     7.8392037880969445f64,
                                     7.8454900509443757f64,
                                     7.8517490414160571f64,
                                     7.8579809951275719f64,
                                     7.8641861446542798f64,
                                     7.8703647195834048f64,
                                     7.8765169465650002f64,
                                     7.8826430493618425f64,
                                     7.8887432488982601f64,
                                     7.8948177633079446f64,
                                     7.9008668079807496f64,
                                     7.9068905956085187f64,
                                     7.9128893362299619f64,
                                     7.9188632372745955f64,
                                     7.9248125036057813f64,
                                     7.9307373375628867f64,
                                     7.9366379390025719f64,
                                     7.9425145053392399f64,
                                     7.9483672315846778f64,
                                     7.9541963103868758f64,
                                     7.9600019320680806f64,
                                     7.9657842846620870f64,
                                     7.9715435539507720f64,
                                     7.9772799234999168f64,
                                     7.9829935746943104f64,
                                     7.9886846867721664f64,
                                     7.9943534368588578f64];


pub fn log2(mut v: f64) -> f64 {
  if v < 0i32 as (f64) {
    0i32 as (f64)
  } else if v < 256i32 as (f64) {
    kLog2Table[v as (usize)]
  } else {
    let mut count: f64 = 0i32 as (f64);
    while 1i32 != 0 {
      v = v / 2i32 as (f64);
      count = count + 1.0f64;
      if v < 256i32 as (f64) {
        return kLog2Table[v as (usize)] + count;
      }
    }
  }
}

static mut kLog2Table: [f32; 256] = [0.0000000000000000f32,
                                     0.0000000000000000f32,
                                     1.0000000000000000f32,
                                     1.5849625007211563f32,
                                     2.0000000000000000f32,
                                     2.3219280948873622f32,
                                     2.5849625007211561f32,
                                     2.8073549220576042f32,
                                     3.0000000000000000f32,
                                     3.1699250014423126f32,
                                     3.3219280948873626f32,
                                     3.4594316186372978f32,
                                     3.5849625007211565f32,
                                     3.7004397181410922f32,
                                     3.8073549220576037f32,
                                     3.9068905956085187f32,
                                     4.0000000000000000f32,
                                     4.0874628412503400f32,
                                     4.1699250014423122f32,
                                     4.2479275134435852f32,
                                     4.3219280948873626f32,
                                     4.3923174227787607f32,
                                     4.4594316186372973f32,
                                     4.5235619560570131f32,
                                     4.5849625007211570f32,
                                     4.6438561897747244f32,
                                     4.7004397181410926f32,
                                     4.7548875021634691f32,
                                     4.8073549220576037f32,
                                     4.8579809951275728f32,
                                     4.9068905956085187f32,
                                     4.9541963103868758f32,
                                     5.0000000000000000f32,
                                     5.0443941193584534f32,
                                     5.0874628412503400f32,
                                     5.1292830169449664f32,
                                     5.1699250014423122f32,
                                     5.2094533656289501f32,
                                     5.2479275134435852f32,
                                     5.2854022188622487f32,
                                     5.3219280948873626f32,
                                     5.3575520046180838f32,
                                     5.3923174227787607f32,
                                     5.4262647547020979f32,
                                     5.4594316186372973f32,
                                     5.4918530963296748f32,
                                     5.5235619560570131f32,
                                     5.5545888516776376f32,
                                     5.5849625007211570f32,
                                     5.6147098441152083f32,
                                     5.6438561897747244f32,
                                     5.6724253419714961f32,
                                     5.7004397181410926f32,
                                     5.7279204545631996f32,
                                     5.7548875021634691f32,
                                     5.7813597135246599f32,
                                     5.8073549220576046f32,
                                     5.8328900141647422f32,
                                     5.8579809951275719f32,
                                     5.8826430493618416f32,
                                     5.9068905956085187f32,
                                     5.9307373375628867f32,
                                     5.9541963103868758f32,
                                     5.9772799234999168f32,
                                     6.0000000000000000f32,
                                     6.0223678130284544f32,
                                     6.0443941193584534f32,
                                     6.0660891904577721f32,
                                     6.0874628412503400f32,
                                     6.1085244567781700f32,
                                     6.1292830169449672f32,
                                     6.1497471195046822f32,
                                     6.1699250014423122f32,
                                     6.1898245588800176f32,
                                     6.2094533656289510f32,
                                     6.2288186904958804f32,
                                     6.2479275134435861f32,
                                     6.2667865406949019f32,
                                     6.2854022188622487f32,
                                     6.3037807481771031f32,
                                     6.3219280948873617f32,
                                     6.3398500028846252f32,
                                     6.3575520046180847f32,
                                     6.3750394313469254f32,
                                     6.3923174227787598f32,
                                     6.4093909361377026f32,
                                     6.4262647547020979f32,
                                     6.4429434958487288f32,
                                     6.4594316186372982f32,
                                     6.4757334309663976f32,
                                     6.4918530963296748f32,
                                     6.5077946401986964f32,
                                     6.5235619560570131f32,
                                     6.5391588111080319f32,
                                     6.5545888516776376f32,
                                     6.5698556083309478f32,
                                     6.5849625007211561f32,
                                     6.5999128421871278f32,
                                     6.6147098441152092f32,
                                     6.6293566200796095f32,
                                     6.6438561897747253f32,
                                     6.6582114827517955f32,
                                     6.6724253419714952f32,
                                     6.6865005271832185f32,
                                     6.7004397181410917f32,
                                     6.7142455176661224f32,
                                     6.7279204545631988f32,
                                     6.7414669864011465f32,
                                     6.7548875021634691f32,
                                     6.7681843247769260f32,
                                     6.7813597135246599f32,
                                     6.7944158663501062f32,
                                     6.8073549220576037f32,
                                     6.8201789624151887f32,
                                     6.8328900141647422f32,
                                     6.8454900509443757f32,
                                     6.8579809951275719f32,
                                     6.8703647195834048f32,
                                     6.8826430493618416f32,
                                     6.8948177633079437f32,
                                     6.9068905956085187f32,
                                     6.9188632372745955f32,
                                     6.9307373375628867f32,
                                     6.9425145053392399f32,
                                     6.9541963103868758f32,
                                     6.9657842846620879f32,
                                     6.9772799234999168f32,
                                     6.9886846867721664f32,
                                     7.0000000000000000f32,
                                     7.0112272554232540f32,
                                     7.0223678130284544f32,
                                     7.0334230015374501f32,
                                     7.0443941193584534f32,
                                     7.0552824355011898f32,
                                     7.0660891904577721f32,
                                     7.0768155970508317f32,
                                     7.0874628412503400f32,
                                     7.0980320829605272f32,
                                     7.1085244567781700f32,
                                     7.1189410727235076f32,
                                     7.1292830169449664f32,
                                     7.1395513523987937f32,
                                     7.1497471195046822f32,
                                     7.1598713367783891f32,
                                     7.1699250014423130f32,
                                     7.1799090900149345f32,
                                     7.1898245588800176f32,
                                     7.1996723448363644f32,
                                     7.2094533656289492f32,
                                     7.2191685204621621f32,
                                     7.2288186904958804f32,
                                     7.2384047393250794f32,
                                     7.2479275134435861f32,
                                     7.2573878426926521f32,
                                     7.2667865406949019f32,
                                     7.2761244052742384f32,
                                     7.2854022188622487f32,
                                     7.2946207488916270f32,
                                     7.3037807481771031f32,
                                     7.3128829552843557f32,
                                     7.3219280948873617f32,
                                     7.3309168781146177f32,
                                     7.3398500028846243f32,
                                     7.3487281542310781f32,
                                     7.3575520046180847f32,
                                     7.3663222142458151f32,
                                     7.3750394313469254f32,
                                     7.3837042924740528f32,
                                     7.3923174227787607f32,
                                     7.4008794362821844f32,
                                     7.4093909361377026f32,
                                     7.4178525148858991f32,
                                     7.4262647547020979f32,
                                     7.4346282276367255f32,
                                     7.4429434958487288f32,
                                     7.4512111118323299f32,
                                     7.4594316186372973f32,
                                     7.4676055500829976f32,
                                     7.4757334309663976f32,
                                     7.4838157772642564f32,
                                     7.4918530963296748f32,
                                     7.4998458870832057f32,
                                     7.5077946401986964f32,
                                     7.5156998382840436f32,
                                     7.5235619560570131f32,
                                     7.5313814605163119f32,
                                     7.5391588111080319f32,
                                     7.5468944598876373f32,
                                     7.5545888516776376f32,
                                     7.5622424242210728f32,
                                     7.5698556083309478f32,
                                     7.5774288280357487f32,
                                     7.5849625007211561f32,
                                     7.5924570372680806f32,
                                     7.5999128421871278f32,
                                     7.6073303137496113f32,
                                     7.6147098441152075f32,
                                     7.6220518194563764f32,
                                     7.6293566200796095f32,
                                     7.6366246205436488f32,
                                     7.6438561897747244f32,
                                     7.6510516911789290f32,
                                     7.6582114827517955f32,
                                     7.6653359171851765f32,
                                     7.6724253419714952f32,
                                     7.6794800995054464f32,
                                     7.6865005271832185f32,
                                     7.6934869574993252f32,
                                     7.7004397181410926f32,
                                     7.7073591320808825f32,
                                     7.7142455176661224f32,
                                     7.7210991887071856f32,
                                     7.7279204545631996f32,
                                     7.7347096202258392f32,
                                     7.7414669864011465f32,
                                     7.7481928495894596f32,
                                     7.7548875021634691f32,
                                     7.7615512324444795f32,
                                     7.7681843247769260f32,
                                     7.7747870596011737f32,
                                     7.7813597135246608f32,
                                     7.7879025593914317f32,
                                     7.7944158663501062f32,
                                     7.8008998999203047f32,
                                     7.8073549220576037f32,
                                     7.8137811912170374f32,
                                     7.8201789624151887f32,
                                     7.8265484872909159f32,
                                     7.8328900141647422f32,
                                     7.8392037880969445f32,
                                     7.8454900509443757f32,
                                     7.8517490414160571f32,
                                     7.8579809951275719f32,
                                     7.8641861446542798f32,
                                     7.8703647195834048f32,
                                     7.8765169465650002f32,
                                     7.8826430493618425f32,
                                     7.8887432488982601f32,
                                     7.8948177633079446f32,
                                     7.9008668079807496f32,
                                     7.9068905956085187f32,
                                     7.9128893362299619f32,
                                     7.9188632372745955f32,
                                     7.9248125036057813f32,
                                     7.9307373375628867f32,
                                     7.9366379390025719f32,
                                     7.9425145053392399f32,
                                     7.9483672315846778f32,
                                     7.9541963103868758f32,
                                     7.9600019320680806f32,
                                     7.9657842846620870f32,
                                     7.9715435539507720f32,
                                     7.9772799234999168f32,
                                     7.9829935746943104f32,
                                     7.9886846867721664f32,
                                     7.9943534368588578f32];

static mut kInsBase: [u32; 24] = [0u32, 1u32, 2u32, 3u32, 4u32, 5u32, 6u32, 8u32, 10u32, 14u32,
                                  18u32, 26u32, 34u32, 50u32, 66u32, 98u32, 130u32, 194u32,
                                  322u32, 578u32, 1090u32, 2114u32, 6210u32, 22594u32];

static mut kInsExtra: [u32; 24] = [0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 1u32, 1u32, 2u32, 2u32,
                                   3u32, 3u32, 4u32, 4u32, 5u32, 5u32, 6u32, 7u32, 8u32, 9u32,
                                   10u32, 12u32, 14u32, 24u32];

static mut kCopyBase: [u32; 24] = [2u32, 3u32, 4u32, 5u32, 6u32, 7u32, 8u32, 9u32, 10u32, 12u32,
                                   14u32, 18u32, 22u32, 30u32, 38u32, 54u32, 70u32, 102u32,
                                   134u32, 198u32, 326u32, 582u32, 1094u32, 2118u32];

static mut kCopyExtra: [u32; 24] = [0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 1u32, 1u32,
                                    2u32, 2u32, 3u32, 3u32, 4u32, 4u32, 5u32, 5u32, 6u32, 7u32,
                                    8u32, 9u32, 10u32, 24u32];

static kBrotliMinWindowBits: i32 = 10i32;

static kBrotliMaxWindowBits: i32 = 24i32;

static mut kUTF8ContextLookup: [u8; 512] = [0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            4i32 as (u8),
                                            4i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            4i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            8i32 as (u8),
                                            12i32 as (u8),
                                            16i32 as (u8),
                                            12i32 as (u8),
                                            12i32 as (u8),
                                            20i32 as (u8),
                                            12i32 as (u8),
                                            16i32 as (u8),
                                            24i32 as (u8),
                                            28i32 as (u8),
                                            12i32 as (u8),
                                            12i32 as (u8),
                                            32i32 as (u8),
                                            12i32 as (u8),
                                            36i32 as (u8),
                                            12i32 as (u8),
                                            44i32 as (u8),
                                            44i32 as (u8),
                                            44i32 as (u8),
                                            44i32 as (u8),
                                            44i32 as (u8),
                                            44i32 as (u8),
                                            44i32 as (u8),
                                            44i32 as (u8),
                                            44i32 as (u8),
                                            44i32 as (u8),
                                            32i32 as (u8),
                                            32i32 as (u8),
                                            24i32 as (u8),
                                            40i32 as (u8),
                                            28i32 as (u8),
                                            12i32 as (u8),
                                            12i32 as (u8),
                                            48i32 as (u8),
                                            52i32 as (u8),
                                            52i32 as (u8),
                                            52i32 as (u8),
                                            48i32 as (u8),
                                            52i32 as (u8),
                                            52i32 as (u8),
                                            52i32 as (u8),
                                            48i32 as (u8),
                                            52i32 as (u8),
                                            52i32 as (u8),
                                            52i32 as (u8),
                                            52i32 as (u8),
                                            52i32 as (u8),
                                            48i32 as (u8),
                                            52i32 as (u8),
                                            52i32 as (u8),
                                            52i32 as (u8),
                                            52i32 as (u8),
                                            52i32 as (u8),
                                            48i32 as (u8),
                                            52i32 as (u8),
                                            52i32 as (u8),
                                            52i32 as (u8),
                                            52i32 as (u8),
                                            52i32 as (u8),
                                            24i32 as (u8),
                                            12i32 as (u8),
                                            28i32 as (u8),
                                            12i32 as (u8),
                                            12i32 as (u8),
                                            12i32 as (u8),
                                            56i32 as (u8),
                                            60i32 as (u8),
                                            60i32 as (u8),
                                            60i32 as (u8),
                                            56i32 as (u8),
                                            60i32 as (u8),
                                            60i32 as (u8),
                                            60i32 as (u8),
                                            56i32 as (u8),
                                            60i32 as (u8),
                                            60i32 as (u8),
                                            60i32 as (u8),
                                            60i32 as (u8),
                                            60i32 as (u8),
                                            56i32 as (u8),
                                            60i32 as (u8),
                                            60i32 as (u8),
                                            60i32 as (u8),
                                            60i32 as (u8),
                                            60i32 as (u8),
                                            56i32 as (u8),
                                            60i32 as (u8),
                                            60i32 as (u8),
                                            60i32 as (u8),
                                            60i32 as (u8),
                                            60i32 as (u8),
                                            24i32 as (u8),
                                            12i32 as (u8),
                                            28i32 as (u8),
                                            12i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            1i32 as (u8),
                                            0i32 as (u8),
                                            1i32 as (u8),
                                            0i32 as (u8),
                                            1i32 as (u8),
                                            0i32 as (u8),
                                            1i32 as (u8),
                                            0i32 as (u8),
                                            1i32 as (u8),
                                            0i32 as (u8),
                                            1i32 as (u8),
                                            0i32 as (u8),
                                            1i32 as (u8),
                                            0i32 as (u8),
                                            1i32 as (u8),
                                            0i32 as (u8),
                                            1i32 as (u8),
                                            0i32 as (u8),
                                            1i32 as (u8),
                                            0i32 as (u8),
                                            1i32 as (u8),
                                            0i32 as (u8),
                                            1i32 as (u8),
                                            0i32 as (u8),
                                            1i32 as (u8),
                                            0i32 as (u8),
                                            1i32 as (u8),
                                            0i32 as (u8),
                                            1i32 as (u8),
                                            0i32 as (u8),
                                            1i32 as (u8),
                                            0i32 as (u8),
                                            1i32 as (u8),
                                            0i32 as (u8),
                                            1i32 as (u8),
                                            0i32 as (u8),
                                            1i32 as (u8),
                                            0i32 as (u8),
                                            1i32 as (u8),
                                            0i32 as (u8),
                                            1i32 as (u8),
                                            0i32 as (u8),
                                            1i32 as (u8),
                                            0i32 as (u8),
                                            1i32 as (u8),
                                            0i32 as (u8),
                                            1i32 as (u8),
                                            0i32 as (u8),
                                            1i32 as (u8),
                                            0i32 as (u8),
                                            1i32 as (u8),
                                            0i32 as (u8),
                                            1i32 as (u8),
                                            0i32 as (u8),
                                            1i32 as (u8),
                                            0i32 as (u8),
                                            1i32 as (u8),
                                            0i32 as (u8),
                                            1i32 as (u8),
                                            0i32 as (u8),
                                            1i32 as (u8),
                                            0i32 as (u8),
                                            1i32 as (u8),
                                            2i32 as (u8),
                                            3i32 as (u8),
                                            2i32 as (u8),
                                            3i32 as (u8),
                                            2i32 as (u8),
                                            3i32 as (u8),
                                            2i32 as (u8),
                                            3i32 as (u8),
                                            2i32 as (u8),
                                            3i32 as (u8),
                                            2i32 as (u8),
                                            3i32 as (u8),
                                            2i32 as (u8),
                                            3i32 as (u8),
                                            2i32 as (u8),
                                            3i32 as (u8),
                                            2i32 as (u8),
                                            3i32 as (u8),
                                            2i32 as (u8),
                                            3i32 as (u8),
                                            2i32 as (u8),
                                            3i32 as (u8),
                                            2i32 as (u8),
                                            3i32 as (u8),
                                            2i32 as (u8),
                                            3i32 as (u8),
                                            2i32 as (u8),
                                            3i32 as (u8),
                                            2i32 as (u8),
                                            3i32 as (u8),
                                            2i32 as (u8),
                                            3i32 as (u8),
                                            2i32 as (u8),
                                            3i32 as (u8),
                                            2i32 as (u8),
                                            3i32 as (u8),
                                            2i32 as (u8),
                                            3i32 as (u8),
                                            2i32 as (u8),
                                            3i32 as (u8),
                                            2i32 as (u8),
                                            3i32 as (u8),
                                            2i32 as (u8),
                                            3i32 as (u8),
                                            2i32 as (u8),
                                            3i32 as (u8),
                                            2i32 as (u8),
                                            3i32 as (u8),
                                            2i32 as (u8),
                                            3i32 as (u8),
                                            2i32 as (u8),
                                            3i32 as (u8),
                                            2i32 as (u8),
                                            3i32 as (u8),
                                            2i32 as (u8),
                                            3i32 as (u8),
                                            2i32 as (u8),
                                            3i32 as (u8),
                                            2i32 as (u8),
                                            3i32 as (u8),
                                            2i32 as (u8),
                                            3i32 as (u8),
                                            2i32 as (u8),
                                            3i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            1i32 as (u8),
                                            1i32 as (u8),
                                            1i32 as (u8),
                                            1i32 as (u8),
                                            1i32 as (u8),
                                            1i32 as (u8),
                                            1i32 as (u8),
                                            1i32 as (u8),
                                            1i32 as (u8),
                                            1i32 as (u8),
                                            1i32 as (u8),
                                            1i32 as (u8),
                                            1i32 as (u8),
                                            1i32 as (u8),
                                            1i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            1i32 as (u8),
                                            1i32 as (u8),
                                            1i32 as (u8),
                                            1i32 as (u8),
                                            1i32 as (u8),
                                            1i32 as (u8),
                                            1i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            1i32 as (u8),
                                            1i32 as (u8),
                                            1i32 as (u8),
                                            1i32 as (u8),
                                            1i32 as (u8),
                                            1i32 as (u8),
                                            3i32 as (u8),
                                            3i32 as (u8),
                                            3i32 as (u8),
                                            3i32 as (u8),
                                            3i32 as (u8),
                                            3i32 as (u8),
                                            3i32 as (u8),
                                            3i32 as (u8),
                                            3i32 as (u8),
                                            3i32 as (u8),
                                            3i32 as (u8),
                                            3i32 as (u8),
                                            3i32 as (u8),
                                            3i32 as (u8),
                                            3i32 as (u8),
                                            3i32 as (u8),
                                            3i32 as (u8),
                                            3i32 as (u8),
                                            3i32 as (u8),
                                            3i32 as (u8),
                                            3i32 as (u8),
                                            3i32 as (u8),
                                            3i32 as (u8),
                                            3i32 as (u8),
                                            3i32 as (u8),
                                            3i32 as (u8),
                                            1i32 as (u8),
                                            1i32 as (u8),
                                            1i32 as (u8),
                                            1i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            0i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8),
                                            2i32 as (u8)];

static mut kSigned3BitContextLookup: [u8; 256] = [0i32 as (u8),
                                                  1i32 as (u8),
                                                  1i32 as (u8),
                                                  1i32 as (u8),
                                                  1i32 as (u8),
                                                  1i32 as (u8),
                                                  1i32 as (u8),
                                                  1i32 as (u8),
                                                  1i32 as (u8),
                                                  1i32 as (u8),
                                                  1i32 as (u8),
                                                  1i32 as (u8),
                                                  1i32 as (u8),
                                                  1i32 as (u8),
                                                  1i32 as (u8),
                                                  1i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  2i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  3i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  4i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  5i32 as (u8),
                                                  6i32 as (u8),
                                                  6i32 as (u8),
                                                  6i32 as (u8),
                                                  6i32 as (u8),
                                                  6i32 as (u8),
                                                  6i32 as (u8),
                                                  6i32 as (u8),
                                                  6i32 as (u8),
                                                  6i32 as (u8),
                                                  6i32 as (u8),
                                                  6i32 as (u8),
                                                  6i32 as (u8),
                                                  6i32 as (u8),
                                                  6i32 as (u8),
                                                  6i32 as (u8),
                                                  7i32 as (u8)];



pub struct __sbuf {
  pub _base: *mut u8,
  pub _size: i32,
}



pub struct __sFILE {
  pub _p: *mut u8,
  pub _r: i32,
  pub _w: i32,
  pub _flags: i16,
  pub _file: i16,
  pub _bf: __sbuf,
  pub _lbfsize: i32,
  pub _cookie: *mut ::std::os::raw::c_void,
  pub _close: fn(*mut ::std::os::raw::c_void) -> i32,
  pub _read: fn(*mut ::std::os::raw::c_void, *mut u8, i32) -> i32,
  pub _seek: fn(*mut ::std::os::raw::c_void, isize, i32) -> isize,
  pub _write: fn(*mut ::std::os::raw::c_void, *const u8, i32) -> i32,
  pub _ub: __sbuf,
  pub _extra: *mut __sFILEX,
  pub _ur: i32,
  pub _ubuf: [u8; 3],
  pub _nbuf: [u8; 1],
  pub _lb: __sbuf,
  pub _blksize: i32,
  pub _offset: isize,
}


static kHashMul32: u32 = 0x1e35a7bdu32;



pub struct MemoryManager {
  pub alloc_func: fn(*mut ::std::os::raw::c_void, usize) -> *mut ::std::os::raw::c_void,
  pub free_func: fn(*mut ::std::os::raw::c_void, *mut ::std::os::raw::c_void),
  pub opaque: *mut ::std::os::raw::c_void,
}

fn Log2FloorNonZero(mut n: usize) -> u32 {
  let mut result: u32 = 0u32;
  while {
          n = n >> 1i32;
          n
        } != 0 {
    result = result.wrapping_add(1 as (u32));
  }
  result
}

fn brotli_min_size_t(mut a: usize, mut b: usize) -> usize {
  if a < b { a } else { b }
}

fn BROTLI_UNALIGNED_LOAD64(mut p: &[::std::os::raw::c_void]) -> usize {
  let mut t: usize;
  memcpy(&mut t, p, ::std::mem::size_of::<usize>());
  t
}

fn Hash(mut p: &[u8], mut shift: usize) -> u32 {
  let h: usize = (BROTLI_UNALIGNED_LOAD64(p) << 16i32).wrapping_mul(kHashMul32 as (usize));
  (h >> shift) as (u32)
}

fn BROTLI_UNALIGNED_LOAD32(mut p: &[::std::os::raw::c_void]) -> u32 {
  let mut t: u32;
  memcpy(&mut t, p, ::std::mem::size_of::<u32>());
  t
}

fn IsMatch(mut p1: &[u8], mut p2: &[u8]) -> i32 {
  if !!(BROTLI_UNALIGNED_LOAD32(p1) == BROTLI_UNALIGNED_LOAD32(p2) &&
        (p1[(4usize)] as (i32) == p2[(4usize)] as (i32)) &&
        (p1[(5usize)] as (i32) == p2[(5usize)] as (i32))) {
    1i32
  } else {
    0i32
  }
}

fn unopt_ctzll(mut val: usize) -> u8 {
  let mut cnt: u8 = 0i32 as (u8);
  while val & 1usize == 0usize {
    val = val >> 1i32;
    cnt = (cnt as (i32) + 1) as (u8);
  }
  cnt
}

fn FindMatchLengthWithLimit(mut s1: &[u8], mut s2: &[u8], mut limit: usize) -> usize {
  let mut matched: usize = 0usize;
  let mut limit2: usize = (limit >> 3i32).wrapping_add(1usize);
  while {
          limit2 = limit2.wrapping_sub(1 as (usize));
          limit2
        } != 0 {
    if BROTLI_UNALIGNED_LOAD64(s2) == BROTLI_UNALIGNED_LOAD64(s1[(matched as (usize))..]) {
      s2 = s2[(8usize)..];
      matched = matched.wrapping_add(8usize);
    } else {
      let mut x: usize = BROTLI_UNALIGNED_LOAD64(s2) ^
                         BROTLI_UNALIGNED_LOAD64(s1[(matched as (usize))..]);
      let mut matching_bits: usize = unopt_ctzll(x) as (usize);
      matched = matched.wrapping_add(matching_bits >> 3i32);
      return matched;
    }
  }
  limit = (limit & 7usize).wrapping_add(1usize);
  while {
          limit = limit.wrapping_sub(1 as (usize));
          limit
        } != 0 {
    if s1[(matched as (usize))] as (i32) == *s2 as (i32) {
      s2 = s2[(1 as (usize))..];
      matched = matched.wrapping_add(1 as (usize));
    } else {
      return matched;
    }
  }
  matched
}

fn EmitInsertLen(mut insertlen: u32, mut commands: &mut [*mut u32]) {
  if insertlen < 6u32 {
    **commands = insertlen;
  } else if insertlen < 130u32 {
    let tail: u32 = insertlen.wrapping_sub(2u32);
    let nbits: u32 = Log2FloorNonZero(tail as (usize)).wrapping_sub(1u32);
    let prefix: u32 = tail >> nbits;
    let inscode: u32 = (nbits << 1i32).wrapping_add(prefix).wrapping_add(2u32);
    let extra: u32 = tail.wrapping_sub(prefix << nbits);
    **commands = inscode | extra << 8i32;
  } else if insertlen < 2114u32 {
    let tail: u32 = insertlen.wrapping_sub(66u32);
    let nbits: u32 = Log2FloorNonZero(tail as (usize));
    let code: u32 = nbits.wrapping_add(10u32);
    let extra: u32 = tail.wrapping_sub(1u32 << nbits);
    **commands = code | extra << 8i32;
  } else if insertlen < 6210u32 {
    let extra: u32 = insertlen.wrapping_sub(2114u32);
    **commands = 21u32 | extra << 8i32;
  } else if insertlen < 22594u32 {
    let extra: u32 = insertlen.wrapping_sub(6210u32);
    **commands = 22u32 | extra << 8i32;
  } else {
    let extra: u32 = insertlen.wrapping_sub(22594u32);
    **commands = 23u32 | extra << 8i32;
  }
  *commands = (*commands).offset(1 as (isize));
}

fn EmitDistance(mut distance: u32, mut commands: &mut [*mut u32]) {
  let mut d: u32 = distance.wrapping_add(3u32);
  let mut nbits: u32 = Log2FloorNonZero(d as (usize)).wrapping_sub(1u32);
  let prefix: u32 = d >> nbits & 1u32;
  let offset: u32 = (2u32).wrapping_add(prefix) << nbits;
  let distcode: u32 =
    (2u32).wrapping_mul(nbits.wrapping_sub(1u32)).wrapping_add(prefix).wrapping_add(80u32);
  let mut extra: u32 = d.wrapping_sub(offset);
  **commands = distcode | extra << 8i32;
  *commands = (*commands).offset(1 as (isize));
}

fn EmitCopyLenLastDistance(mut copylen: usize, mut commands: &mut [*mut u32]) {
  if copylen < 12usize {
    **commands = copylen.wrapping_add(20usize) as (u32);
    *commands = (*commands).offset(1 as (isize));
  } else if copylen < 72usize {
    let tail: usize = copylen.wrapping_sub(8usize);
    let nbits: usize = Log2FloorNonZero(tail).wrapping_sub(1u32) as (usize);
    let prefix: usize = tail >> nbits;
    let code: usize = (nbits << 1i32).wrapping_add(prefix).wrapping_add(28usize);
    let extra: usize = tail.wrapping_sub(prefix << nbits);
    **commands = (code | extra << 8i32) as (u32);
    *commands = (*commands).offset(1 as (isize));
  } else if copylen < 136usize {
    let tail: usize = copylen.wrapping_sub(8usize);
    let code: usize = (tail >> 5i32).wrapping_add(54usize);
    let extra: usize = tail & 31usize;
    **commands = (code | extra << 8i32) as (u32);
    *commands = (*commands).offset(1 as (isize));
    **commands = 64u32;
    *commands = (*commands).offset(1 as (isize));
  } else if copylen < 2120usize {
    let tail: usize = copylen.wrapping_sub(72usize);
    let nbits: usize = Log2FloorNonZero(tail) as (usize);
    let code: usize = nbits.wrapping_add(52usize);
    let extra: usize = tail.wrapping_sub(1usize << nbits);
    **commands = (code | extra << 8i32) as (u32);
    *commands = (*commands).offset(1 as (isize));
    **commands = 64u32;
    *commands = (*commands).offset(1 as (isize));
  } else {
    let extra: usize = copylen.wrapping_sub(2120usize);
    **commands = (63usize | extra << 8i32) as (u32);
    *commands = (*commands).offset(1 as (isize));
    **commands = 64u32;
    *commands = (*commands).offset(1 as (isize));
  }
}

fn HashBytesAtOffset(mut v: usize, mut offset: i32, mut shift: usize) -> u32 {
  0i32;
  0i32;
  {
    let h: usize = (v >> 8i32 * offset << 16i32).wrapping_mul(kHashMul32 as (usize));
    (h >> shift) as (u32)
  }
}

fn EmitCopyLen(mut copylen: usize, mut commands: &mut [*mut u32]) {
  if copylen < 10usize {
    **commands = copylen.wrapping_add(38usize) as (u32);
  } else if copylen < 134usize {
    let tail: usize = copylen.wrapping_sub(6usize);
    let nbits: usize = Log2FloorNonZero(tail).wrapping_sub(1u32) as (usize);
    let prefix: usize = tail >> nbits;
    let code: usize = (nbits << 1i32).wrapping_add(prefix).wrapping_add(44usize);
    let extra: usize = tail.wrapping_sub(prefix << nbits);
    **commands = (code | extra << 8i32) as (u32);
  } else if copylen < 2118usize {
    let tail: usize = copylen.wrapping_sub(70usize);
    let nbits: usize = Log2FloorNonZero(tail) as (usize);
    let code: usize = nbits.wrapping_add(52usize);
    let extra: usize = tail.wrapping_sub(1usize << nbits);
    **commands = (code | extra << 8i32) as (u32);
  } else {
    let extra: usize = copylen.wrapping_sub(2118usize);
    **commands = (63usize | extra << 8i32) as (u32);
  }
  *commands = (*commands).offset(1 as (isize));
}

fn CreateCommands(input_index: usize,
                  mut block_size: usize,
                  mut input_size: usize,
                  mut base_ip: &[u8],
                  mut table: &mut [i32],
                  mut table_bits: usize,
                  mut literals: &mut [*mut u8],
                  mut commands: &mut [*mut u32]) {
  let mut ip_index: usize = input_index;
  let shift: usize = (64u32 as (usize)).wrapping_sub(table_bits);
  let mut ip_end: usize = input_index.wrapping_add(block_size);
  let mut next_emit: usize = input_index;
  let mut last_distance: i32 = -1i32;
  let kInputMarginBytes: usize = 16usize;
  let kMinMatchLen: usize = 6usize;
  if block_size >= kInputMarginBytes {
    let len_limit: usize = brotli_min_size_t(block_size.wrapping_sub(kMinMatchLen),
                                             input_size.wrapping_sub(kInputMarginBytes));
    let mut ip_limit: usize = input_index.wrapping_add(len_limit);
    let mut next_hash: u32;
    let mut goto_emit_remainder: i32 = 0i32;
    next_hash = Hash(base_ip[({
                        ip_index = ip_index.wrapping_add(1 as (usize));
                        ip_index
                      } as (usize))..],
                     shift);
    while goto_emit_remainder == 0 {
      let mut skip: u32 = 32u32;
      let mut next_ip: usize = ip_index;
      let mut candidate: usize;
      0i32;
      loop {
        {
          'break3: loop {
            {
              let mut hash: u32 = next_hash;
              let mut bytes_between_hash_lookups: u32 = ({
                                                           let _old = skip;
                                                           skip = skip.wrapping_add(1 as (u32));
                                                           _old
                                                         }) >>
                                                        5i32;
              ip_index = next_ip;
              0i32;
              next_ip = ip_index.wrapping_add(bytes_between_hash_lookups as (usize));
              if next_ip > ip_limit {
                goto_emit_remainder = 1i32;
                {
                  {
                    break 'break3;
                  }
                }
              }
              next_hash = Hash(base_ip[(next_ip as (usize))..], shift);
              0i32;
              candidate = ip_index.wrapping_sub(last_distance as (usize));
              if IsMatch(base_ip[(ip_index as (usize))..],
                         base_ip[(candidate as (usize))..]) != 0 {
                if candidate < ip_index {
                  table[(hash as (usize))] = ip_index.wrapping_sub(0usize) as (i32);
                  {
                    {
                      break 'break3;
                    }
                  }
                }
              }
              candidate = table[(hash as (usize))] as (usize);
              0i32;
              0i32;
              table[(hash as (usize))] = ip_index.wrapping_sub(0usize) as (i32);
            }
            if !(IsMatch(base_ip[(ip_index as (usize))..],
                         base_ip[(candidate as (usize))..]) == 0) {
              break;
            }
          }
        }
        if !(ip_index.wrapping_sub(candidate) >
             (1usize << 18i32).wrapping_sub(16usize) as (isize) as (usize) &&
             (goto_emit_remainder == 0)) {
          break;
        }
      }
      if goto_emit_remainder != 0 {
        {
          break;
        }
      }
      {
        let mut base: usize = ip_index;
        let mut matched: usize = (6usize)
          .wrapping_add(FindMatchLengthWithLimit(base_ip[(candidate as (usize))..]
                                                   .offset(6i32 as (isize)),
                                                 base_ip[(ip_index as (usize))..].offset(6i32 as
                                                                                         (isize)),
                                                 ip_end.wrapping_sub(ip_index)
                                                   .wrapping_sub(6usize)));
        let mut distance: i32 = base.wrapping_sub(candidate) as (i32);
        let mut insert: i32 = base.wrapping_sub(next_emit) as (i32);
        ip_index = ip_index.wrapping_add(matched);
        0i32;
        EmitInsertLen(insert as (u32), commands);
        memcpy(*literals,
               base_ip[(next_emit as (usize))..],
               insert as (usize));
        *literals = (*literals).offset(insert as (isize));
        if distance == last_distance {
          **commands = 64u32;
          *commands = (*commands).offset(1 as (isize));
        } else {
          EmitDistance(distance as (u32), commands);
          last_distance = distance;
        }
        EmitCopyLenLastDistance(matched, commands);
        next_emit = ip_index;
        if ip_index >= ip_limit {
          goto_emit_remainder = 1i32;
          {
            {
              break;
            }
          }
        }
        {
          let mut input_bytes: usize = BROTLI_UNALIGNED_LOAD64(base_ip[(ip_index as (usize))..]
                                                                 .offset(-(5i32 as (isize))));
          let mut prev_hash: u32 = HashBytesAtOffset(input_bytes, 0i32, shift);
          let mut cur_hash: u32;
          table[(prev_hash as (usize))] = ip_index.wrapping_sub(5usize) as (i32);
          prev_hash = HashBytesAtOffset(input_bytes, 1i32, shift);
          table[(prev_hash as (usize))] = ip_index.wrapping_sub(4usize) as (i32);
          prev_hash = HashBytesAtOffset(input_bytes, 2i32, shift);
          table[(prev_hash as (usize))] = ip_index.wrapping_sub(3usize) as (i32);
          input_bytes = BROTLI_UNALIGNED_LOAD64(base_ip[(ip_index as (usize))..]
                                                  .offset(-(2i32 as (isize))));
          cur_hash = HashBytesAtOffset(input_bytes, 2i32, shift);
          prev_hash = HashBytesAtOffset(input_bytes, 0i32, shift);
          table[(prev_hash as (usize))] = ip_index.wrapping_sub(2usize) as (i32);
          prev_hash = HashBytesAtOffset(input_bytes, 1i32, shift);
          table[(prev_hash as (usize))] = ip_index.wrapping_sub(1usize) as (i32);
          candidate = table[(cur_hash as (usize))] as (usize);
          table[(cur_hash as (usize))] = ip_index as (i32);
        }
      }
      while ip_index.wrapping_sub(candidate) <=
            (1usize << 18i32).wrapping_sub(16usize) as (isize) as (usize) &&
            (IsMatch(base_ip[(ip_index as (usize))..],
                     base_ip[(candidate as (usize))..]) != 0) {
        let mut base_index: usize = ip_index;
        let mut matched: usize = (6usize)
          .wrapping_add(FindMatchLengthWithLimit(base_ip[(candidate as (usize))..]
                                                   .offset(6i32 as (isize)),
                                                 base_ip[(ip_index as (usize))..].offset(6i32 as
                                                                                         (isize)),
                                                 ip_end.wrapping_sub(ip_index)
                                                   .wrapping_sub(6usize)));
        ip_index = ip_index.wrapping_add(matched);
        last_distance = base_index.wrapping_sub(candidate) as (i32);
        0i32;
        EmitCopyLen(matched, commands);
        EmitDistance(last_distance as (u32), commands);
        next_emit = ip_index;
        if ip_index >= ip_limit {
          goto_emit_remainder = 1i32;
          {
            {
              break;
            }
          }
        }
        {
          let mut input_bytes: usize = BROTLI_UNALIGNED_LOAD64(base_ip[(ip_index as (usize))..]
                                                                 .offset(-(5i32 as (isize))));
          let mut prev_hash: u32 = HashBytesAtOffset(input_bytes, 0i32, shift);
          let mut cur_hash: u32;
          table[(prev_hash as (usize))] = ip_index.wrapping_sub(5usize) as (i32);
          prev_hash = HashBytesAtOffset(input_bytes, 1i32, shift);
          table[(prev_hash as (usize))] = ip_index.wrapping_sub(4usize) as (i32);
          prev_hash = HashBytesAtOffset(input_bytes, 2i32, shift);
          table[(prev_hash as (usize))] = ip_index.wrapping_sub(3usize) as (i32);
          input_bytes = BROTLI_UNALIGNED_LOAD64(base_ip[(ip_index as (usize))..]
                                                  .offset(-(2i32 as (isize))));
          cur_hash = HashBytesAtOffset(input_bytes, 2i32, shift);
          prev_hash = HashBytesAtOffset(input_bytes, 0i32, shift);
          table[(prev_hash as (usize))] = ip_index.wrapping_sub(2usize) as (i32);
          prev_hash = HashBytesAtOffset(input_bytes, 1i32, shift);
          table[(prev_hash as (usize))] = ip_index.wrapping_sub(1usize) as (i32);
          candidate = table[(cur_hash as (usize))] as (usize);
          table[(cur_hash as (usize))] = ip_index as (i32);
        }
      }
      if goto_emit_remainder == 0 {
        next_hash = Hash(base_ip[({
                            ip_index = ip_index.wrapping_add(1 as (usize));
                            ip_index
                          } as (usize))..],
                         shift);
      }
    }
  }
  0i32;
  if next_emit < ip_end {
    let insert: u32 = ip_end.wrapping_sub(next_emit) as (u32);
    EmitInsertLen(insert, commands);
    memcpy(*literals,
           base_ip[(next_emit as (usize))..],
           insert as (usize));
    *literals = (*literals).offset(insert as (isize));
  }
}

fn FastLog2(mut v: usize) -> f64 {
  if v < ::std::mem::size_of::<[f32; 256]>().wrapping_div(::std::mem::size_of::<f32>()) {
    return kLog2Table[v] as (f64);
  }
  log2(v as (f64))
}

fn ShannonEntropy(mut population: &[u32], mut size: usize, mut total: &mut usize) -> f64 {
  let mut sum: usize = 0usize;
  let mut retval: f64 = 0i32 as (f64);
  let mut population_end: *const u32 = population[(size as (usize))..];
  let mut p: usize;
  let mut odd_number_of_elements_left: i32 = 0i32;
  if size & 1usize != 0 {
    odd_number_of_elements_left = 1i32;
  }
  while population < population_end {
    if odd_number_of_elements_left == 0 {
      p = *{
             let _old = population;
             population = population[(1 as (usize))..];
             _old
           } as (usize);
      sum = sum.wrapping_add(p);
      retval = retval - p as (f64) * FastLog2(p);
    }
    odd_number_of_elements_left = 0i32;
    p = *{
           let _old = population;
           population = population[(1 as (usize))..];
           _old
         } as (usize);
    sum = sum.wrapping_add(p);
    retval = retval - p as (f64) * FastLog2(p);
  }
  if sum != 0 {
    retval = retval + sum as (f64) * FastLog2(sum);
  }
  *total = sum;
  retval
}

fn BitsEntropy(mut population: &[u32], mut size: usize) -> f64 {
  let mut sum: usize;
  let mut retval: f64 = ShannonEntropy(population, size, &mut sum);
  if retval < sum as (f64) {
    retval = sum as (f64);
  }
  retval
}

fn ShouldCompress(mut input: &[u8], mut input_size: usize, mut num_literals: usize) -> i32 {
  let mut corpus_size: f64 = input_size as (f64);
  if num_literals as (f64) < 0.98f64 * corpus_size {
    1i32
  } else {
    let mut literal_histo: [u32; 256] =
      [0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
       0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
       0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
       0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
       0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
       0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
       0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
       0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
       0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
       0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
       0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
       0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
       0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
       0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
       0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
       0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
       0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
       0u32];
    let max_total_bit_cost: f64 = corpus_size * 8i32 as (f64) * 0.98f64 / 43i32 as (f64);
    let mut i: usize;
    i = 0usize;
    while i < input_size {
      {
        let _rhs = 1;
        let _lhs = &mut literal_histo[input[(i as (usize))] as (usize)];
        *_lhs = (*_lhs).wrapping_add(_rhs as (u32));
      }
      i = i.wrapping_add(43usize);
    }
    if !!(BitsEntropy(literal_histo.as_mut_ptr(), 256usize) < max_total_bit_cost) {
      1i32
    } else {
      0i32
    }
  }
}

fn BROTLI_UNALIGNED_STORE64(mut p: &mut [::std::os::raw::c_void], mut v: usize) {
  memcpy(p, &mut v, ::std::mem::size_of::<usize>());
}

fn BrotliWriteBits(mut n_bits: usize,
                   mut bits: usize,
                   mut pos: &mut [usize],
                   mut array: &mut [u8]) {
  let mut p: *mut u8 = &mut array[((*pos >> 3i32) as (usize))];
  let mut v: usize = *p as (usize);
  0i32;
  0i32;
  v = v | bits << (*pos & 7usize);
  BROTLI_UNALIGNED_STORE64(p, v);
  *pos = (*pos).wrapping_add(n_bits);
}

fn BrotliStoreMetaBlockHeader(mut len: usize,
                              mut is_uncompressed: i32,
                              mut storage_ix: &mut [usize],
                              mut storage: &mut [u8]) {
  let mut nibbles: usize = 6usize;
  BrotliWriteBits(1usize, 0usize, storage_ix, storage);
  if len <= (1u32 << 16i32) as (usize) {
    nibbles = 4usize;
  } else if len <= (1u32 << 20i32) as (usize) {
    nibbles = 5usize;
  }
  BrotliWriteBits(2usize, nibbles.wrapping_sub(4usize), storage_ix, storage);
  BrotliWriteBits(nibbles.wrapping_mul(4usize),
                  len.wrapping_sub(1usize),
                  storage_ix,
                  storage);
  BrotliWriteBits(1usize, is_uncompressed as (usize), storage_ix, storage);
}



pub struct HuffmanTree {
  pub total_count_: u32,
  pub index_left_: i16,
  pub index_right_or_value_: i16,
}

fn BuildAndStoreCommandPrefixCode(mut histogram: &[u32],
                                  mut depth: &mut [u8],
                                  mut bits: &mut [u16],
                                  mut storage_ix: &mut [usize],
                                  mut storage: &mut [u8]) {
  let mut tree: [HuffmanTree; 129];
  let mut cmd_depth: [u8; 704] = [0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8),
                                  0i32 as (u8)];
  let mut cmd_bits: [u16; 64];
  BrotliCreateHuffmanTree(histogram, 64usize, 15i32, tree.as_mut_ptr(), depth);
  BrotliCreateHuffmanTree(&histogram[(64usize)],
                          64usize,
                          14i32,
                          tree.as_mut_ptr(),
                          &mut depth[(64usize)]);
  memcpy(cmd_depth.as_mut_ptr(), depth[(24usize)..], 24usize);
  memcpy(cmd_depth.as_mut_ptr().offset(24i32 as (isize)),
         depth,
         8usize);
  memcpy(cmd_depth.as_mut_ptr().offset(32i32 as (isize)),
         depth[(48usize)..],
         8usize);
  memcpy(cmd_depth.as_mut_ptr().offset(40i32 as (isize)),
         depth[(8usize)..],
         8usize);
  memcpy(cmd_depth.as_mut_ptr().offset(48i32 as (isize)),
         depth[(56usize)..],
         8usize);
  memcpy(cmd_depth.as_mut_ptr().offset(56i32 as (isize)),
         depth[(16usize)..],
         8usize);
  BrotliConvertBitDepthsToSymbols(cmd_depth.as_mut_ptr(), 64usize, cmd_bits.as_mut_ptr());
  memcpy(bits,
         cmd_bits.as_mut_ptr().offset(24i32 as (isize)),
         16usize);
  memcpy(bits[(8usize)..],
         cmd_bits.as_mut_ptr().offset(40i32 as (isize)),
         16usize);
  memcpy(bits[(16usize)..],
         cmd_bits.as_mut_ptr().offset(56i32 as (isize)),
         16usize);
  memcpy(bits[(24usize)..], cmd_bits.as_mut_ptr(), 48usize);
  memcpy(bits[(48usize)..],
         cmd_bits.as_mut_ptr().offset(32i32 as (isize)),
         16usize);
  memcpy(bits[(56usize)..],
         cmd_bits.as_mut_ptr().offset(48i32 as (isize)),
         16usize);
  BrotliConvertBitDepthsToSymbols(&mut depth[(64usize)], 64usize, &mut bits[(64usize)]);
  {
    let mut i: usize;
    memset(cmd_depth.as_mut_ptr(), 0i32, 64usize);
    memcpy(cmd_depth.as_mut_ptr(), depth[(24usize)..], 8usize);
    memcpy(cmd_depth.as_mut_ptr().offset(64i32 as (isize)),
           depth[(32usize)..],
           8usize);
    memcpy(cmd_depth.as_mut_ptr().offset(128i32 as (isize)),
           depth[(40usize)..],
           8usize);
    memcpy(cmd_depth.as_mut_ptr().offset(192i32 as (isize)),
           depth[(48usize)..],
           8usize);
    memcpy(cmd_depth.as_mut_ptr().offset(384i32 as (isize)),
           depth[(56usize)..],
           8usize);
    i = 0usize;
    while i < 8usize {
      {
        cmd_depth[(128usize).wrapping_add((8usize).wrapping_mul(i))] = depth[(i as (usize))];
        cmd_depth[(256usize).wrapping_add((8usize).wrapping_mul(i))] = depth[((8usize).wrapping_add(i) as
         (usize))];
        cmd_depth[(448usize).wrapping_add((8usize).wrapping_mul(i))] = depth[((16usize).wrapping_add(i) as
         (usize))];
      }
      i = i.wrapping_add(1 as (usize));
    }
    BrotliStoreHuffmanTree(cmd_depth.as_mut_ptr(),
                           704usize,
                           tree.as_mut_ptr(),
                           storage_ix,
                           storage);
  }
  BrotliStoreHuffmanTree(&mut depth[(64usize)],
                         64usize,
                         tree.as_mut_ptr(),
                         storage_ix,
                         storage);
}

fn StoreCommands(mut m: &mut [MemoryManager],
                 mut literals: &[u8],
                 num_literals: usize,
                 mut commands: &[u32],
                 num_commands: usize,
                 mut storage_ix: &mut [usize],
                 mut storage: &mut [u8]) {
  static mut kNumExtraBits: [u32; 128] =
    [0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 1u32, 1u32, 2u32, 2u32, 3u32, 3u32, 4u32, 4u32, 5u32,
     5u32, 6u32, 7u32, 8u32, 9u32, 10u32, 12u32, 14u32, 24u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
     0u32, 0u32, 1u32, 1u32, 2u32, 2u32, 3u32, 3u32, 4u32, 4u32, 0u32, 0u32, 0u32, 0u32, 0u32,
     0u32, 0u32, 0u32, 1u32, 1u32, 2u32, 2u32, 3u32, 3u32, 4u32, 4u32, 5u32, 5u32, 6u32, 7u32,
     8u32, 9u32, 10u32, 24u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
     0u32, 0u32, 0u32, 0u32, 0u32, 1u32, 1u32, 2u32, 2u32, 3u32, 3u32, 4u32, 4u32, 5u32, 5u32,
     6u32, 6u32, 7u32, 7u32, 8u32, 8u32, 9u32, 9u32, 10u32, 10u32, 11u32, 11u32, 12u32, 12u32,
     13u32, 13u32, 14u32, 14u32, 15u32, 15u32, 16u32, 16u32, 17u32, 17u32, 18u32, 18u32, 19u32,
     19u32, 20u32, 20u32, 21u32, 21u32, 22u32, 22u32, 23u32, 23u32, 24u32, 24u32];
  static mut kInsertOffset: [u32; 24] =
    [0u32, 1u32, 2u32, 3u32, 4u32, 5u32, 6u32, 8u32, 10u32, 14u32, 18u32, 26u32, 34u32, 50u32,
     66u32, 98u32, 130u32, 194u32, 322u32, 578u32, 1090u32, 2114u32, 6210u32, 22594u32];
  let mut lit_depths: [u8; 256];
  let mut lit_bits: [u16; 256];
  let mut lit_histo: [u32; 256] =
    [0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
     0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
     0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
     0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
     0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
     0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
     0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
     0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
     0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
     0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
     0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
     0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
     0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
     0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
     0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
     0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
     0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
     0u32];
  let mut cmd_depths: [u8; 128] = [0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8),
                                   0i32 as (u8)];
  let mut cmd_bits: [u16; 128] = [0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16),
                                  0i32 as (u16)];
  let mut cmd_histo: [u32; 128] =
    [0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
     0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
     0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
     0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
     0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
     0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
     0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
     0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32,
     0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32];
  let mut i: usize;
  i = 0usize;
  while i < num_literals {
    {
      let _rhs = 1;
      let _lhs = &mut lit_histo[literals[(i as (usize))] as (usize)];
      *_lhs = (*_lhs).wrapping_add(_rhs as (u32));
    }
    i = i.wrapping_add(1 as (usize));
  }
  BrotliBuildAndStoreHuffmanTreeFast(m,
                                     lit_histo.as_mut_ptr(),
                                     num_literals,
                                     8usize,
                                     lit_depths.as_mut_ptr(),
                                     lit_bits.as_mut_ptr(),
                                     storage_ix,
                                     storage);
  if !(0i32 == 0) {
    return;
  }
  i = 0usize;
  while i < num_commands {
    {
      let code: u32 = commands[(i as (usize))] & 0xffu32;
      0i32;
      {
        let _rhs = 1;
        let _lhs = &mut cmd_histo[code as (usize)];
        *_lhs = (*_lhs).wrapping_add(_rhs as (u32));
      }
    }
    i = i.wrapping_add(1 as (usize));
  }
  {
    let _rhs = 1i32;
    let _lhs = &mut cmd_histo[1usize];
    *_lhs = (*_lhs).wrapping_add(_rhs as (u32));
  }
  {
    let _rhs = 1i32;
    let _lhs = &mut cmd_histo[2usize];
    *_lhs = (*_lhs).wrapping_add(_rhs as (u32));
  }
  {
    let _rhs = 1i32;
    let _lhs = &mut cmd_histo[64usize];
    *_lhs = (*_lhs).wrapping_add(_rhs as (u32));
  }
  {
    let _rhs = 1i32;
    let _lhs = &mut cmd_histo[84usize];
    *_lhs = (*_lhs).wrapping_add(_rhs as (u32));
  }
  BuildAndStoreCommandPrefixCode(cmd_histo.as_mut_ptr(),
                                 cmd_depths.as_mut_ptr(),
                                 cmd_bits.as_mut_ptr(),
                                 storage_ix,
                                 storage);
  i = 0usize;
  while i < num_commands {
    {
      let cmd: u32 = commands[(i as (usize))];
      let code: u32 = cmd & 0xffu32;
      let extra: u32 = cmd >> 8i32;
      0i32;
      BrotliWriteBits(cmd_depths[code as (usize)] as (usize),
                      cmd_bits[code as (usize)] as (usize),
                      storage_ix,
                      storage);
      BrotliWriteBits(kNumExtraBits[code as (usize)] as (usize),
                      extra as (usize),
                      storage_ix,
                      storage);
      if code < 24u32 {
        let insert: u32 = kInsertOffset[code as (usize)].wrapping_add(extra);
        let mut j: u32;
        j = 0u32;
        while j < insert {
          {
            let lit: u8 = *literals;
            BrotliWriteBits(lit_depths[lit as (usize)] as (usize),
                            lit_bits[lit as (usize)] as (usize),
                            storage_ix,
                            storage);
            literals = literals[(1 as (usize))..];
          }
          j = j.wrapping_add(1 as (u32));
        }
      }
    }
    i = i.wrapping_add(1 as (usize));
  }
}

fn EmitUncompressedMetaBlock(mut input: &[u8],
                             mut input_size: usize,
                             mut storage_ix: &mut [usize],
                             mut storage: &mut [u8]) {
  BrotliStoreMetaBlockHeader(input_size, 1i32, storage_ix, storage);
  *storage_ix = (*storage_ix).wrapping_add(7u32 as (usize)) & !7u32 as (usize);
  memcpy(&mut storage[((*storage_ix >> 3i32) as (usize))],
         input,
         input_size);
  *storage_ix = (*storage_ix).wrapping_add(input_size << 3i32);
  storage[((*storage_ix >> 3i32) as (usize))] = 0i32 as (u8);
}

fn BrotliCompressFragmentTwoPassImpl(mut m: &mut [MemoryManager],
                                     mut base_ip: &[u8],
                                     mut input_size: usize,
                                     mut is_last: i32,
                                     mut command_buf: &mut [u32],
                                     mut literal_buf: &mut [u8],
                                     mut table: &mut [i32],
                                     mut table_bits: usize,
                                     mut storage_ix: &mut [usize],
                                     mut storage: &mut [u8]) {
  let mut input_index: usize = 0usize;
  is_last;
  while input_size > 0usize {
    let mut block_size: usize = brotli_min_size_t(input_size, kCompressFragmentTwoPassBlockSize);
    let mut commands: *mut u32 = command_buf;
    let mut literals: *mut u8 = literal_buf;
    let mut num_literals: usize;
    CreateCommands(input_index,
                   block_size,
                   input_size,
                   base_ip,
                   table,
                   table_bits,
                   &mut literals,
                   &mut commands);
    num_literals = ((literals as (isize)).wrapping_sub(literal_buf as (isize)) /
                    ::std::mem::size_of::<*mut u8>() as (isize)) as (usize);
    if ShouldCompress(base_ip[(input_index as (usize))..],
                      block_size,
                      num_literals) != 0 {
      let num_commands: usize = ((commands as (isize)).wrapping_sub(command_buf as (isize)) /
                                 ::std::mem::size_of::<*mut u32>() as (isize)) as
                                (usize);
      BrotliStoreMetaBlockHeader(block_size, 0i32, storage_ix, storage);
      BrotliWriteBits(13usize, 0usize, storage_ix, storage);
      StoreCommands(m,
                    literal_buf,
                    num_literals,
                    command_buf,
                    num_commands,
                    storage_ix,
                    storage);
      if !(0i32 == 0) {
        return;
      }
    } else {
      EmitUncompressedMetaBlock(base_ip[(input_index as (usize))..],
                                block_size,
                                storage_ix,
                                storage);
    }
    input_index = input_index.wrapping_add(block_size);
    input_size = input_size.wrapping_sub(block_size);
  }
}

fn BrotliCompressFragmentTwoPassImpl8(mut m: &mut [MemoryManager],
                                      mut input: &[u8],
                                      mut input_size: usize,
                                      mut is_last: i32,
                                      mut command_buf: &mut [u32],
                                      mut literal_buf: &mut [u8],
                                      mut table: &mut [i32],
                                      mut storage_ix: &mut [usize],
                                      mut storage: &mut [u8]) {
  BrotliCompressFragmentTwoPassImpl(m,
                                    input,
                                    input_size,
                                    is_last,
                                    command_buf,
                                    literal_buf,
                                    table,
                                    8usize,
                                    storage_ix,
                                    storage);
}

fn BrotliCompressFragmentTwoPassImpl9(mut m: &mut [MemoryManager],
                                      mut input: &[u8],
                                      mut input_size: usize,
                                      mut is_last: i32,
                                      mut command_buf: &mut [u32],
                                      mut literal_buf: &mut [u8],
                                      mut table: &mut [i32],
                                      mut storage_ix: &mut [usize],
                                      mut storage: &mut [u8]) {
  BrotliCompressFragmentTwoPassImpl(m,
                                    input,
                                    input_size,
                                    is_last,
                                    command_buf,
                                    literal_buf,
                                    table,
                                    9usize,
                                    storage_ix,
                                    storage);
}

fn BrotliCompressFragmentTwoPassImpl10(mut m: &mut [MemoryManager],
                                       mut input: &[u8],
                                       mut input_size: usize,
                                       mut is_last: i32,
                                       mut command_buf: &mut [u32],
                                       mut literal_buf: &mut [u8],
                                       mut table: &mut [i32],
                                       mut storage_ix: &mut [usize],
                                       mut storage: &mut [u8]) {
  BrotliCompressFragmentTwoPassImpl(m,
                                    input,
                                    input_size,
                                    is_last,
                                    command_buf,
                                    literal_buf,
                                    table,
                                    10usize,
                                    storage_ix,
                                    storage);
}

fn BrotliCompressFragmentTwoPassImpl11(mut m: &mut [MemoryManager],
                                       mut input: &[u8],
                                       mut input_size: usize,
                                       mut is_last: i32,
                                       mut command_buf: &mut [u32],
                                       mut literal_buf: &mut [u8],
                                       mut table: &mut [i32],
                                       mut storage_ix: &mut [usize],
                                       mut storage: &mut [u8]) {
  BrotliCompressFragmentTwoPassImpl(m,
                                    input,
                                    input_size,
                                    is_last,
                                    command_buf,
                                    literal_buf,
                                    table,
                                    11usize,
                                    storage_ix,
                                    storage);
}

fn BrotliCompressFragmentTwoPassImpl12(mut m: &mut [MemoryManager],
                                       mut input: &[u8],
                                       mut input_size: usize,
                                       mut is_last: i32,
                                       mut command_buf: &mut [u32],
                                       mut literal_buf: &mut [u8],
                                       mut table: &mut [i32],
                                       mut storage_ix: &mut [usize],
                                       mut storage: &mut [u8]) {
  BrotliCompressFragmentTwoPassImpl(m,
                                    input,
                                    input_size,
                                    is_last,
                                    command_buf,
                                    literal_buf,
                                    table,
                                    12usize,
                                    storage_ix,
                                    storage);
}

fn BrotliCompressFragmentTwoPassImpl13(mut m: &mut [MemoryManager],
                                       mut input: &[u8],
                                       mut input_size: usize,
                                       mut is_last: i32,
                                       mut command_buf: &mut [u32],
                                       mut literal_buf: &mut [u8],
                                       mut table: &mut [i32],
                                       mut storage_ix: &mut [usize],
                                       mut storage: &mut [u8]) {
  BrotliCompressFragmentTwoPassImpl(m,
                                    input,
                                    input_size,
                                    is_last,
                                    command_buf,
                                    literal_buf,
                                    table,
                                    13usize,
                                    storage_ix,
                                    storage);
}

fn BrotliCompressFragmentTwoPassImpl14(mut m: &mut [MemoryManager],
                                       mut input: &[u8],
                                       mut input_size: usize,
                                       mut is_last: i32,
                                       mut command_buf: &mut [u32],
                                       mut literal_buf: &mut [u8],
                                       mut table: &mut [i32],
                                       mut storage_ix: &mut [usize],
                                       mut storage: &mut [u8]) {
  BrotliCompressFragmentTwoPassImpl(m,
                                    input,
                                    input_size,
                                    is_last,
                                    command_buf,
                                    literal_buf,
                                    table,
                                    14usize,
                                    storage_ix,
                                    storage);
}

fn BrotliCompressFragmentTwoPassImpl15(mut m: &mut [MemoryManager],
                                       mut input: &[u8],
                                       mut input_size: usize,
                                       mut is_last: i32,
                                       mut command_buf: &mut [u32],
                                       mut literal_buf: &mut [u8],
                                       mut table: &mut [i32],
                                       mut storage_ix: &mut [usize],
                                       mut storage: &mut [u8]) {
  BrotliCompressFragmentTwoPassImpl(m,
                                    input,
                                    input_size,
                                    is_last,
                                    command_buf,
                                    literal_buf,
                                    table,
                                    15usize,
                                    storage_ix,
                                    storage);
}

fn BrotliCompressFragmentTwoPassImpl16(mut m: &mut [MemoryManager],
                                       mut input: &[u8],
                                       mut input_size: usize,
                                       mut is_last: i32,
                                       mut command_buf: &mut [u32],
                                       mut literal_buf: &mut [u8],
                                       mut table: &mut [i32],
                                       mut storage_ix: &mut [usize],
                                       mut storage: &mut [u8]) {
  BrotliCompressFragmentTwoPassImpl(m,
                                    input,
                                    input_size,
                                    is_last,
                                    command_buf,
                                    literal_buf,
                                    table,
                                    16usize,
                                    storage_ix,
                                    storage);
}

fn BrotliCompressFragmentTwoPassImpl17(mut m: &mut [MemoryManager],
                                       mut input: &[u8],
                                       mut input_size: usize,
                                       mut is_last: i32,
                                       mut command_buf: &mut [u32],
                                       mut literal_buf: &mut [u8],
                                       mut table: &mut [i32],
                                       mut storage_ix: &mut [usize],
                                       mut storage: &mut [u8]) {
  BrotliCompressFragmentTwoPassImpl(m,
                                    input,
                                    input_size,
                                    is_last,
                                    command_buf,
                                    literal_buf,
                                    table,
                                    17usize,
                                    storage_ix,
                                    storage);
}

fn RewindBitPosition(new_storage_ix: usize, mut storage_ix: &mut [usize], mut storage: &mut [u8]) {
  let bitpos: usize = new_storage_ix & 7usize;
  let mask: usize = (1u32 << bitpos).wrapping_sub(1u32) as (usize);
  {
    let _rhs = mask as (u8);
    let _lhs = &mut storage[((new_storage_ix >> 3i32) as (usize))];
    *_lhs = (*_lhs as (i32) & _rhs as (i32)) as (u8);
  }
  *storage_ix = new_storage_ix;
}


pub fn BrotliCompressFragmentTwoPass(mut m: &mut [MemoryManager],
                                     mut input: &[u8],
                                     mut input_size: usize,
                                     mut is_last: i32,
                                     mut command_buf: &mut [u32],
                                     mut literal_buf: &mut [u8],
                                     mut table: &mut [i32],
                                     mut table_size: usize,
                                     mut storage_ix: &mut [usize],
                                     mut storage: &mut [u8]) {
  let initial_storage_ix: usize = *storage_ix;
  let table_bits: usize = Log2FloorNonZero(table_size) as (usize);
  if table_bits == 8usize {
    BrotliCompressFragmentTwoPassImpl8(m,
                                       input,
                                       input_size,
                                       is_last,
                                       command_buf,
                                       literal_buf,
                                       table,
                                       storage_ix,
                                       storage);
  }
  if table_bits == 9usize {
    BrotliCompressFragmentTwoPassImpl9(m,
                                       input,
                                       input_size,
                                       is_last,
                                       command_buf,
                                       literal_buf,
                                       table,
                                       storage_ix,
                                       storage);
  }
  if table_bits == 10usize {
    BrotliCompressFragmentTwoPassImpl10(m,
                                        input,
                                        input_size,
                                        is_last,
                                        command_buf,
                                        literal_buf,
                                        table,
                                        storage_ix,
                                        storage);
  }
  if table_bits == 11usize {
    BrotliCompressFragmentTwoPassImpl11(m,
                                        input,
                                        input_size,
                                        is_last,
                                        command_buf,
                                        literal_buf,
                                        table,
                                        storage_ix,
                                        storage);
  }
  if table_bits == 12usize {
    BrotliCompressFragmentTwoPassImpl12(m,
                                        input,
                                        input_size,
                                        is_last,
                                        command_buf,
                                        literal_buf,
                                        table,
                                        storage_ix,
                                        storage);
  }
  if table_bits == 13usize {
    BrotliCompressFragmentTwoPassImpl13(m,
                                        input,
                                        input_size,
                                        is_last,
                                        command_buf,
                                        literal_buf,
                                        table,
                                        storage_ix,
                                        storage);
  }
  if table_bits == 14usize {
    BrotliCompressFragmentTwoPassImpl14(m,
                                        input,
                                        input_size,
                                        is_last,
                                        command_buf,
                                        literal_buf,
                                        table,
                                        storage_ix,
                                        storage);
  }
  if table_bits == 15usize {
    BrotliCompressFragmentTwoPassImpl15(m,
                                        input,
                                        input_size,
                                        is_last,
                                        command_buf,
                                        literal_buf,
                                        table,
                                        storage_ix,
                                        storage);
  }
  if table_bits == 16usize {
    BrotliCompressFragmentTwoPassImpl16(m,
                                        input,
                                        input_size,
                                        is_last,
                                        command_buf,
                                        literal_buf,
                                        table,
                                        storage_ix,
                                        storage);
  }
  if table_bits == 17usize {
    BrotliCompressFragmentTwoPassImpl17(m,
                                        input,
                                        input_size,
                                        is_last,
                                        command_buf,
                                        literal_buf,
                                        table,
                                        storage_ix,
                                        storage);
  }
  if (*storage_ix).wrapping_sub(initial_storage_ix) > (31usize).wrapping_add(input_size << 3i32) {
    RewindBitPosition(initial_storage_ix, storage_ix, storage);
    EmitUncompressedMetaBlock(input, input_size, storage_ix, storage);
  }
  if is_last != 0 {
    BrotliWriteBits(1usize, 1usize, storage_ix, storage);
    BrotliWriteBits(1usize, 1usize, storage_ix, storage);
    *storage_ix = (*storage_ix).wrapping_add(7u32 as (usize)) & !7u32 as (usize);
  }
}
